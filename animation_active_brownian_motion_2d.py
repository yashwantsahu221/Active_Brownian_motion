# -*- coding: utf-8 -*-
"""Animation Active Brownian motion 2D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwOk8q5ob7o_H00jYX-FkbplZJJ9j1C1
"""

import numpy as np
import matplotlib.pyplot as plt
randn = np.random.randn
import math
import scipy.io as sio
import scipy.integrate as integrate
import matplotlib.animation as animation
from collections import deque
from IPython.display import HTML

dt = 0.01
D = 0.22                           # Diffusion coeffiecient
Dr =  0.16                         # Rotational Diffusion coeffiecient
sqdt = np.sqrt(2*D*dt)
rsqdt = np.sqrt(2*Dr*dt)
Nt=int(1e6)  # 10^6
x = np.zeros(Nt)
theta = np.zeros(Nt)
y = np.zeros(Nt)
sigma = 0

def velocity(v):

  for i in range(Nt-1):
    theta[i+1] = theta[i] + sigma*dt + rsqdt*randn()
    x[i+1] = x[i] + v * np.cos(theta[i])*dt +  sqdt*randn()
    y[i+1] = y[i] + v * np.sin(theta[i])*dt +  sqdt*randn()
  return x,y

Nm = 10000

velocity(0)
x0 = np.zeros(Nm);y0=np.zeros(Nm)
x0 = x;y0=y
data0=np.array([x0, y0])

velocity(1)
x1 = np.zeros(Nm);y1=np.zeros(Nm)
x1 = x;y1=y
data1=np.array([x1, y1])

velocity(2)
x2 = np.zeros(Nm);y2=np.zeros(Nm)
x2 = x;y2=y
data2 = np.array([x2, y2])

velocity(3)
x3 = np.zeros(Nm);y3=np.zeros(Nm)
x3 = x;y3=y
data3 = np.array([x3, y3])



# create a time array from 0..100 sampled at 0.05 second steps
dt = 0.01;   t = np.arange(0.0, 5, dt)
history_len = 10000  # how many trajectory points to display

def updateline(i,data0,line0,data1,line1, data2, line2, data3, line3):
    line0.set_data(data0[..., :i])
    line1.set_data(data1[..., :i])
    line2.set_data(data2[..., :i])
    line3.set_data(data3[..., :i])

  #  time_text.set_text("time= %.1fs" % (i*dt))
    return line2, line3,line1,line0






fig = plt.figure(figsize = (10,10))

ax0 = fig.add_subplot(111)
k, = ax0.plot([], [], color='b', label="0$\mu$m$s^{-1}$")#marker='o',markevery=2,markersize='3')linestyle='dashed',
#ax1 = fig.add_subplot(111)
l, = ax0.plot([], [], color='g', label="1$\mu$m$s^{-1}$")#marker='o',markevery=2,markersize='3')linestyle='dashed',
#ax2 = fig.add_subplot(111)
m, = ax0.plot([], [], color='r', label="2$\mu$m$s^{-1}$")#marker='o',markevery=2,markersize='3')linestyle='dashed',
#ax3 = fig.add_subplot(111)
n, = ax0.plot([], [], color='y',label="3$\mu$m$s^{-1}$")#marker='o',markevery=2,markersize='3')linestyle='dashed',

ax0.set_xlim(-2,22);ax0.set_ylim(-10,10)
#ax2.set_xlim(-5,5);ax2.set_ylim(-5,5)
#ax3.set_xlim(-5,5);ax3.set_ylim(-5,5)
#ax0.set_xlim(-5,5);ax2.set_ylim(-5,5)

plt.legend()
plt.xlabel("x coordinate")
plt.ylabel("y coordinate")

time_text = ax0.text(0.1, 0.95, "", transform=ax0.transAxes,
                    fontsize=10, color='red')


line_animation = animation.FuncAnimation(
    fig, updateline,np.arange(0,500),interval=10,  fargs=(data0,k,data1,l,data2, m, data3, n),blit=True)
line_animation.save('Active brownian motion.mp4', fps=50)
HTML(line_animation.to_jshtml())